<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>firstOne</title>
    <url>/2022/01/09/1/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>linux常用命令</title>
    <url>/2022/01/12/Linux%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h4 id="1-系统状况"><a href="#1-系统状况" class="headerlink" title="1.系统状况"></a>1.系统状况</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">top # 查看所有进程的信息，M按内存排序，p按cpu排序</span><br><span class="line">df -h # 查看硬盘使用情况</span><br><span class="line">free -h # 查看内存使用情况</span><br><span class="line">du -sh # 查看当前目录占用的硬盘空间</span><br><span class="line">ps aux # 查看所有进程</span><br><span class="line">kill -9 pid # 杀死编号pid的进程</span><br><span class="line">netstat -nt #查看所有网络连接</span><br><span class="line">w #列出当前登录的用户</span><br><span class="line">ping www.baidu.com # 检查是否联网</span><br></pre></td></tr></table></figure>

<h4 id="2-文件权限"><a href="#2-文件权限" class="headerlink" title="2.文件权限"></a>2.文件权限</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod +x xxx <span class="comment">#添加可执行权限</span></span><br><span class="line">chmod +x xxx -R <span class="comment">#递归地修改整个文件</span></span><br></pre></td></tr></table></figure>

<h4 id="3-文件"><a href="#3-文件" class="headerlink" title="3.文件"></a>3.文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find path -name <span class="string">&#x27;*.py&#x27;</span> <span class="comment">#搜索某个路径下的.py文件</span></span><br><span class="line">grep xxx <span class="comment"># stdin读入若干行数据</span></span><br><span class="line">wc <span class="comment"># 统计行数等 -l 行数 -w 单词数 -c 字节数</span></span><br><span class="line">tree <span class="comment">#展示文件结构，-a展示隐藏文件</span></span><br><span class="line">ag xxx <span class="comment">#搜索当前目录下的所有文件，检索xxx字符</span></span><br><span class="line">cut -d <span class="string">&#x27;分割符&#x27;</span> -f 3,5 <span class="comment">#分割符分开的第3，第5列</span></span><br><span class="line">sort <span class="comment">#按字典序排序</span></span><br><span class="line">xargs <span class="comment">#将stdin数据分割成命令</span></span><br><span class="line">head -3 xxx <span class="comment">#展示前三行内容，tail是尾部</span></span><br></pre></td></tr></table></figure>

<h4 id="4-工具"><a href="#4-工具" class="headerlink" title="4.工具"></a>4.工具</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">time <span class="built_in">command</span> <span class="comment">#统计command的执行时间</span></span><br><span class="line">ipython3 <span class="comment">#小型jupyter</span></span><br><span class="line">tar -zcvf xxx.tar.gz path <span class="comment">#压缩至</span></span><br><span class="line">tar -zxvf xxx.tar.gz <span class="comment">#解压</span></span><br><span class="line">diff xxx yyy <span class="comment">#查找两个文件的不同点</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux命令</tag>
      </tags>
  </entry>
  <entry>
    <title>bash</title>
    <url>/2022/01/10/bash/</url>
    <content><![CDATA[<h4 id="1-Hello-World"><a href="#1-Hello-World" class="headerlink" title="1. Hello World"></a>1. Hello World</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello world&quot;</span> <span class="comment">#双引号表示执行，单引号表示单纯输出</span></span><br><span class="line"></span><br><span class="line">chmod +x xxx.sh <span class="comment">#使xxx.sh脚本具有执行能力</span></span><br></pre></td></tr></table></figure>

<h4 id="2-注释"><a href="#2-注释" class="headerlink" title="2.注释"></a>2.注释</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:&lt;&lt;!</span><br><span class="line">注释 <span class="comment"># !是任意字符串，#也可</span></span><br><span class="line">!</span><br></pre></td></tr></table></figure>

<h4 id="3-变量"><a href="#3-变量" class="headerlink" title="3.变量"></a>3.变量</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">name=<span class="string">&#x27;luohk&#x27;</span></span><br><span class="line">name=<span class="string">&quot;luohk&quot;</span></span><br><span class="line">name=luohk <span class="comment">#三种都是一样的</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$name</span> <span class="comment"># luohk</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;name&#125;</span>19 <span class="comment"># luohk19</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">readonly</span> name <span class="comment">#只读变量</span></span><br><span class="line"><span class="built_in">declare</span> -r name <span class="comment">#另一种写法</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">unset</span> name <span class="comment">#删除变量</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> name <span class="comment">#自定义转环境</span></span><br><span class="line"><span class="built_in">export</span> name=luohk <span class="comment">#环境转自定义</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#name&#125;</span> <span class="comment"># 5</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#name:0:3&#125;</span> <span class="comment">#luo</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#默认变量 $0, $1, $2</span></span><br><span class="line"><span class="comment"># $# 传入参数个数; $* 用空格隔开; $@ 参数用双引号括起来</span></span><br></pre></td></tr></table></figure>

<h4 id="4-数组"><a href="#4-数组" class="headerlink" title="4.数组"></a>4.数组</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">array=(1 xyz luohk) <span class="comment">#用空格隔开</span></span><br><span class="line">array[1] = xyz <span class="comment">#按index取</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;array[index]&#125;</span> <span class="comment">#按index取值</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;array[*]&#125;</span> || <span class="variable">$&#123;array[@]&#125;</span> <span class="comment">#取整个数组,获取数组长度在前加#</span></span><br></pre></td></tr></table></figure>

<h4 id="5-expr"><a href="#5-expr" class="headerlink" title="5.expr"></a>5.expr</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">str = <span class="string">&quot;hello world!&quot;</span></span><br><span class="line"><span class="built_in">echo</span> `expr length <span class="string">&quot;<span class="variable">$str</span>&quot;</span>` <span class="comment">#注意不是单引号，输出12</span></span><br><span class="line"><span class="built_in">echo</span> `expr index <span class="string">&quot;<span class="variable">$str</span>&quot;</span> aWd` <span class="comment">#输出任意一个字符在最前面的位置</span></span><br><span class="line"><span class="built_in">echo</span> `expr substr <span class="string">&quot;<span class="variable">$str</span>&quot;</span> 2 3` <span class="comment">#index从1开始,ell</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> `expr <span class="variable">$a</span> \* <span class="variable">$b</span>` <span class="comment">#支持乘法操作，但乘法需要转义</span></span><br><span class="line"><span class="built_in">echo</span> `expr \( <span class="variable">$a</span> + 1 \) \* \( <span class="variable">$b</span> + 1 \)` <span class="comment">#括号也需要转义</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> `expr <span class="variable">$a</span> <span class="string">&#x27;&lt;&#x27;</span> <span class="variable">$b</span>` | <span class="built_in">echo</span> `expr <span class="variable">$a</span> \&lt; <span class="variable">$b</span>` <span class="comment">#一样，小于等于等需要连续转义</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &amp;运算当两个非零时，返回第一个参数，否则返回0；若第一个为0或空，不计算第二个</span></span><br><span class="line"><span class="comment"># |运算，优先返回非空非0的值；若第一个参数非空或非0时，不会计算第二个参数</span></span><br></pre></td></tr></table></figure>

<h4 id="6-读取，-echo，printf-类似c-c-的"><a href="#6-读取，-echo，printf-类似c-c-的" class="headerlink" title="6.读取， echo，printf(类似c/c++的)"></a>6.读取， echo，printf(类似c/c++的)</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">read</span> name <span class="comment">#读取输入至name</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;please input your name&quot;</span> -t 30 name <span class="comment">#等三十秒提示输入到名字</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;Hi\n&quot;</span> <span class="comment"># -e开启转义, Hi回车</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello World&quot;</span> &gt; output.txt <span class="comment">#输出到特定文件</span></span><br><span class="line"><span class="built_in">echo</span> `date` <span class="comment">#输出时间</span></span><br></pre></td></tr></table></figure>

<h4 id="7-test"><a href="#7-test" class="headerlink" title="7.test"></a>7.test</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">man <span class="built_in">test</span> <span class="comment">#可以查看test的用法</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span> 2 -lt 3 <span class="comment"># 0表示真</span></span><br><span class="line"><span class="built_in">echo</span> $? <span class="comment">#输出上一个命令的返回值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span> -e filename <span class="comment">#判断是否存在， -f是否为文件，-d是否为目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#类似地， -r是否可读， -w可写， -x可执行， -s是否为空</span></span><br><span class="line"><span class="comment"># -eq -ne -gt -lt -ge -le latex懂得都懂</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#字符串也可比较</span></span><br><span class="line"><span class="built_in">test</span> str1 == str2</span><br><span class="line"><span class="built_in">test</span> str1 != str2</span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span> -r filename -a -x filename <span class="comment"># -a是否同时成立， -o至少一个成立，！取反</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [] 与 test 类似</span></span><br></pre></td></tr></table></figure>

<h4 id="8-判断"><a href="#8-判断" class="headerlink" title="8.判断"></a>8.判断</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> condition  <span class="comment">#condition用上面的[]实现</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">	<span class="comment">#blabla</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if-else</span></span><br><span class="line"><span class="keyword">if</span> condition</span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line">	<span class="comment">#blabla</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	<span class="comment">#blabla</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if-elif-else</span></span><br><span class="line"><span class="keyword">if</span> condition</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">	<span class="comment">#blabla</span></span><br><span class="line"><span class="keyword">elif</span> condition</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">	<span class="comment">#blabla</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	<span class="comment">#blabla</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#case</span></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$name</span> <span class="keyword">in</span></span><br><span class="line">	value1)</span><br><span class="line">		<span class="comment">#bla</span></span><br><span class="line">		;;</span><br><span class="line">	value2)</span><br><span class="line">		<span class="comment">#bla</span></span><br><span class="line">		;;</span><br><span class="line">	*)</span><br><span class="line">		<span class="comment">#bla</span></span><br><span class="line">		;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>

<h4 id="9-循环语句"><a href="#9-循环语句" class="headerlink" title="9.循环语句"></a>9.循环语句</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#形式1</span></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> var1 var2 var3</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	<span class="comment">#blabla</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#例子</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(seq 1 10) <span class="comment"># &#123;a..z&#125;输出a到z</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="variable">$i</span> <span class="comment">#输出1到10</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#形式2</span></span><br><span class="line"><span class="keyword">for</span> ((expr;cond;expr))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	<span class="comment">#bla</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#例子</span></span><br><span class="line"><span class="keyword">for</span> ((i=1; i&lt;=10; i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#形式3</span></span><br><span class="line"><span class="keyword">while</span> condition</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	<span class="comment">#bla</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#例子</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> name</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="variable">$name</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#形式4，while改until根据意思就知道</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#break命令无法跳出case，;;才行</span></span><br><span class="line"><span class="comment">#break命令可以跳出一层循环</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#continue类似</span></span><br></pre></td></tr></table></figure>

<h4 id="10-函数"><a href="#10-函数" class="headerlink" title="10.函数"></a>10.函数</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">function</span>] <span class="function"><span class="title">func_name</span></span>() &#123;</span><br><span class="line">	<span class="comment">#bla</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># $(func_name) 获取中间stdout的值</span></span><br><span class="line"><span class="comment"># $?获取上一次调用的返回</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">func</span></span>() &#123;</span><br><span class="line">	name=luohk</span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;hello <span class="variable">$name</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output=$(func)</span><br><span class="line">ret=$?</span><br><span class="line"></span><br><span class="line"><span class="comment">#函数内采用 $1, $2来取输入参数，但$0仍是文件名</span></span><br><span class="line"><span class="built_in">echo</span> $(func 10)</span><br><span class="line"></span><br><span class="line"><span class="comment">#局部变量</span></span><br><span class="line"><span class="built_in">local</span> name=luohk</span><br></pre></td></tr></table></figure>

<h4 id="11-exit、文件重定向、引入外部脚本"><a href="#11-exit、文件重定向、引入外部脚本" class="headerlink" title="11.exit、文件重定向、引入外部脚本"></a>11.exit、文件重定向、引入外部脚本</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exit</span> 0 <span class="comment">#表示成功 且 能被$?接收</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">command</span> &gt; file <span class="comment">#将stdout重定向到file中</span></span><br><span class="line"><span class="built_in">command</span> &gt;&gt; file <span class="comment">#追加方式</span></span><br><span class="line"><span class="comment">#反之是读入</span></span><br><span class="line"></span><br><span class="line">```test.sh</span><br><span class="line"><span class="comment">#! /bin/bash</span></span><br><span class="line"><span class="built_in">read</span> a</span><br><span class="line"><span class="built_in">read</span> b</span><br><span class="line"><span class="built_in">echo</span> $(expr <span class="string">&quot;<span class="variable">$a</span>&quot;</span> + <span class="string">&quot;<span class="variable">$b</span>&quot;</span>)</span><br><span class="line">```</span><br><span class="line">```input.txt</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">```</span><br><span class="line">chmod +x test.sh</span><br><span class="line">./test.sh &lt; input.txt &gt; output.txt</span><br><span class="line">cat output.txt <span class="comment"># 7</span></span><br><span class="line"><span class="comment">#用这个也可以实现对拍噢</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> test1.sh</span><br><span class="line"><span class="comment">#可以使用test1.sh内的变量</span></span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>bash</tag>
      </tags>
  </entry>
  <entry>
    <title>docker使用</title>
    <url>/2022/01/12/docker/</url>
    <content><![CDATA[<h4 id="1-前期配置"><a href="#1-前期配置" class="headerlink" title="1.前期配置"></a>1.前期配置</h4><p>请看<a href="https://luohk19.github.io/2022/01/12/%E7%A7%9F%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%8E%AF%E5%A2%83/">服务器配置</a>，完成后便可开始</p>
<h4 id="2-Docker概念"><a href="#2-Docker概念" class="headerlink" title="2.Docker概念"></a>2.Docker概念</h4><h5 id="2-1-Docker的结构"><a href="#2-1-Docker的结构" class="headerlink" title="2.1 Docker的结构"></a>2.1 Docker的结构</h5><p>$docker\begin{cases}image \begin{cases}container \cr container \cr … \end{cases}   \cr image \cr …\end{cases}$</p>
<h5 id="2-2-Docker的小概念"><a href="#2-2-Docker的小概念" class="headerlink" title="2.2 Docker的小概念"></a>2.2 Docker的小概念</h5><p>采用相同的image（镜像）生成的container（容器）配置都相同。</p>
<p>每个container都是完全独立的云端服务器，docker管理image时会采取空间优化。</p>
<p>未来如果需要迁移container，可以先生成image（可下载到其他服务器加载）</p>
<h4 id="3-Docker-Images"><a href="#3-Docker-Images" class="headerlink" title="3.Docker Images"></a>3.Docker Images</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull ubuntu:20.04 <span class="comment">#可以拉取一个镜像 name:tag</span></span><br><span class="line"></span><br><span class="line">docker images <span class="comment">#查看目前存在的image</span></span><br><span class="line"></span><br><span class="line">docker rmi &lt;imageName&gt; <span class="comment">#便可删除对应镜像</span></span><br><span class="line"></span><br><span class="line">docker save -o ubuntu_20_04.tar ubuntu:20.04 <span class="comment">#保存镜像,可以用ls -l查看权限</span></span><br><span class="line"><span class="comment"># 查看权限后发现仅自己有可读写权限，因此需要添加权限</span></span><br><span class="line"></span><br><span class="line">docker load -i ubuntu_20_04.tar <span class="comment">#读取生成镜像</span></span><br><span class="line"><span class="comment">#可以将原镜像删去再检验</span></span><br></pre></td></tr></table></figure>

<p>自此通过scp命令可以实现不同服务器的镜像迁移</p>
<h4 id="4-Docker-Container"><a href="#4-Docker-Container" class="headerlink" title="4.Docker Container"></a>4.Docker Container</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker create -it ubuntu:20.04 <span class="comment">#利用image生成container</span></span><br><span class="line"></span><br><span class="line">docker ps -a <span class="comment">#查看创建了的容器，无a则展示正在运行的</span></span><br><span class="line"></span><br><span class="line">docker start CONTAINER_ID <span class="comment">#启动容器，docker ps检验</span></span><br><span class="line"></span><br><span class="line">docker stop CONTAINER_ID <span class="comment">#停止容器，docker ps检验</span></span><br><span class="line"></span><br><span class="line">docker restart CONTAINER_ID <span class="comment">#重启</span></span><br><span class="line"></span><br><span class="line">docker run -itd ubuntu:20.04 <span class="comment">#创建并启动container</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#CONTAINER_ID 与 CONTAINER_NAME 都可以，下面用CONTAINER代替</span></span><br><span class="line"></span><br><span class="line">docker attach CONTAINER <span class="comment">#进入容器，前提是已启动，默认root</span></span><br><span class="line"><span class="comment">#想退出？ ctrl+p 再 ctrl+q, ctrl+q是用于挂起，否则直接关闭</span></span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> CONTAINER COMMAND <span class="comment">#在某容器内执行命令，!!!容器必须运行</span></span><br><span class="line"></span><br><span class="line">docker rm CONTAINER <span class="comment">#删除容器，注意rmi与rm的区别</span></span><br><span class="line"><span class="comment">#删除前要停止容器，全删除已停止的容器为docker container prune</span></span><br><span class="line"></span><br><span class="line">docker <span class="built_in">export</span> -o xxx.tar CONTAINER <span class="comment">#不保存历史记录等，占用内存比save更少</span></span><br><span class="line"><span class="comment">#注意添加可读权限</span></span><br><span class="line"></span><br><span class="line">docker import xxx.tar ubuntu:20.04 <span class="comment">#导入，实现容器到其他服务器镜像的迁移</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#剩下的都是一些小操作</span></span><br><span class="line">docker top CONTAINER <span class="comment">#查看容器的的所有进程</span></span><br><span class="line">docker stats <span class="comment">#查看所有容器的信息cpu等</span></span><br><span class="line">docker cp xxx CONTAINER:XXX <span class="comment">#本地与容器之间传递信息</span></span><br><span class="line">docker rename CONTAINER1 CONTAINER2 <span class="comment">#重命名</span></span><br><span class="line">docker update CONTAINER --XXX XXX <span class="comment">#更新各种参数</span></span><br></pre></td></tr></table></figure>

<h4 id="5-对于vscode"><a href="#5-对于vscode" class="headerlink" title="5.对于vscode"></a>5.对于vscode</h4><p>在docker挂起时，可能会发生vscode的快捷键冲突，因此需要找到左下角设置-&gt;快捷键</p>
<p>再查找ctrl+q的快捷方式，将视图的when条件加上 !terminalFocus 便可</p>
<p>解决方法来源于stackOverFlow</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>django后端AI训练</title>
    <url>/2022/01/12/django/</url>
    <content><![CDATA[<h4 id="1-初始配置"><a href="#1-初始配置" class="headerlink" title="1.初始配置"></a>1.初始配置</h4><p>如果想完美贴合本次教程的环境，可以联系作者发送docker文件以确保环境相同。</p>
<p>在此之前若未安装docker可以先安装，安装教程<a href="https://luohk19.github.io/2022/01/12/%E7%A7%9F%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%8E%AF%E5%A2%83/">如此</a>，docker的使用教程[如此](<a href="https://luohk19.github.io/2022/01/12/docker/">docker使用 | luohk19</a>)。</p>
<p>安装镜像后，创建容器，开启项目，配置git</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">django-admin --version #检查是否安装</span><br><span class="line"></span><br><span class="line">django-admin startproject mysite #创建项目 xxx</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看目录</span></span><br><span class="line">mysite/ #项目容器，可以随时改名</span><br><span class="line">	manage.py/ # 管理项目的命令行工具</span><br><span class="line">	mysite/ </span><br><span class="line">		__init__.py # 告诉python这个目录要被认为是一个包</span><br><span class="line">		settings.py # 配置文件</span><br><span class="line">		urls.py	# 路由文件</span><br><span class="line">		asgi.py # asgi在web服务器上的入口</span><br><span class="line">		wsgi.py # wsgi在web服务器上的入口</span><br><span class="line"></span><br><span class="line">git init #创建git环境</span><br></pre></td></tr></table></figure>

<h4 id="2-开始"><a href="#2-开始" class="headerlink" title="2.开始"></a>2.开始</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#初始运行</span></span><br><span class="line">python3 manage.py runserver <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">8000</span></span><br><span class="line"><span class="comment">#当用本地的host访问时会报错，需要在/acapp/settings.py内添加对应的allowed_hosts</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建app</span></span><br><span class="line">python3 manage.py startapp game</span><br><span class="line"></span><br><span class="line"><span class="comment">#及时更新</span></span><br><span class="line">python3 manage.py migrate</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建管理员用户</span></span><br><span class="line">python3 manage.py createsuperuser <span class="comment">#随后打开host:port/admin登录</span></span><br><span class="line"><span class="comment">#随后创建urls.py,templates文件夹</span></span><br></pre></td></tr></table></figure>

<h4 id="3-创建路由"><a href="#3-创建路由" class="headerlink" title="3.创建路由"></a>3.创建路由</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在game app内创建的urls.py 中仿照总acapp内的urls.py 写url</span></span><br><span class="line"><span class="comment"># 最后在总的urls内添加对应的path</span></span><br><span class="line">```game/urls.py</span><br><span class="line"><span class="keyword">import</span> game.views <span class="keyword">import</span> index</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, index, name=<span class="string">&quot;index&quot;</span>)</span><br><span class="line">]</span><br><span class="line">```</span><br><span class="line">```game/views.py</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;hello World!&#x27;</span>)</span><br><span class="line">```</span><br><span class="line">```acapp/urls.py</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;game/&#x27;</span>, include(<span class="string">&#x27;game.urls&#x27;</span>)), <span class="comment">#当只有一个app时不需要写&#x27;game/&#x27;</span></span><br><span class="line">    ...</span><br><span class="line">]</span><br><span class="line">```</span><br></pre></td></tr></table></figure>

<h4 id="4-储存数据"><a href="#4-储存数据" class="headerlink" title="4.储存数据"></a>4.储存数据</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需要在mysite的settings.py文件夹中加入，指示静态数据的位置</span></span><br><span class="line">STATIC_ROOT = os.path.join(BASE_DIR, <span class="string">&#x27;static&#x27;</span>) <span class="comment">#在lenet下创建static文件夹</span></span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR, <span class="string">&#x27;media&#x27;</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>后端</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>租服务器的环境配置</title>
    <url>/2022/01/12/%E7%A7%9F%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h4 id="1-购买指南及前期操作"><a href="#1-购买指南及前期操作" class="headerlink" title="1.购买指南及前期操作"></a>1.购买指南及前期操作</h4><ul>
<li><p>内存不需要买太大（1核2G），后期动态扩容</p>
</li>
<li><p>不用买最大带宽，按量付费更实惠</p>
</li>
<li><p>选择ubuntu20.04，支持后续docker</p>
</li>
<li><p>安全组控制能访问那些端口（起码要有22端口）ssh，在sshconfig修改允许登录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/ssh</span><br><span class="line">sudo vim sshd_config</span><br></pre></td></tr></table></figure></li>
<li><p>创建非root用户，给予sudo权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adduser luohk</span><br><span class="line">usermod -aG sudo luohk</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装tmux, 根据自己的需求更改tmux.conf</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="2-在docker上配置"><a href="#2-在docker上配置" class="headerlink" title="2.在docker上配置"></a>2.在docker上配置</h4><h5 id="2-1-安装docker"><a href="#2-1-安装docker" class="headerlink" title="2.1 安装docker"></a>2.1 安装docker</h5><p><a href="https://docs.docker.com/engine/install/ubuntu/">Install Docker Engine on Ubuntu | Docker Documentation</a></p>
<p>到install Docker Engine第一步结束就可</p>
<h5 id="2-2-加入docker用户组"><a href="#2-2-加入docker用户组" class="headerlink" title="2.2 加入docker用户组"></a>2.2 加入docker用户组</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不用每次都输入sudo</span></span><br><span class="line">sudo usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>server</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/01/08/hello-world/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="60d335b7180a6957abe64f977aafef3d3a993b5bff30507ffd9f3e75ef7790de">10d79030e8222445804370796b90fca1fcf46a07b5ecf341c635269a7fe842f80cf07e697ff3618a365f409d43ee2a0b71169e7502cdfd2ac90458dd940f8bc9dffd4520316db24d3e303037ca2d5032e72bf872f07e40dbb3cf3ace773ac1c9</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>private</tag>
      </tags>
  </entry>
</search>
